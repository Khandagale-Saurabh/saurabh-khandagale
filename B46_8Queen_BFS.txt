# Saurabh Khandagale 
# Roll:46
#AIM:- Solve 8 Queen problem using BFS.

from queue import Queue
#importing queue


def solve_bfs():
    solutions = []
    queue = Queue()
    queue.put([])
 #working untill queue is not empty   
    while not queue.empty():
        solution = queue.get()
        if getSolution(solution):
            continue
#in row storing lenght and appinding solution to it if loop reaches to last node            
        row = len(solution)
        if row == 8:
            solutions.append(solution)
            break
        for col in range(8):
            queen = (row, col)
            queens = solution.copy()
            queens.append(queen)
            queue.put(queens)
    return solutions

#will get us solution
def getSolution( queens):
        for i in range(1, len(queens)):
            for j in range(0, i):
                a, b = queens[i]
                c, d = queens[j]
                if a == c or b == d or abs(a - c) == abs(b - d):
                    return True
        return False



 #calling function  

print("Solve 8 Queen problem using BFS")
print("===================================================================")  
print(solve_bfs())

print("===================================================================")